.define public AD0_PIN 0
.define public IOW_PIN 19
.define public IOR_PIN 18
.define public IOCHRDY_PIN 26
.define public DIR_PIN 27
.define public SYNC_PIN 17
.define public BYTE_PIN 16

; 10 instructions
.program iow
.side_set 2 opt                   ; sideset bit 1 is ADS, bit 0 is IOCHRDY
    mov y,~NULL         ; start with the value 0xFFFFFFFF
restart:
    wait 1 gpio IOW_PIN           ; IOW rising edge (or already high when PIO starts)
.wrap_target
   ; wait 1 gpio SYNC_PIN           ; SYNC rising edge (or already high when PIO starts)
   ; wait 0 gpio SYNC_PIN           ; SYNC falling edge, no sideset to not conflict with other SMs
   ; jmp pin restart
   ; in pins, 16 ; save addr
    ;wait 1 gpio IOW_PIN           ; IOW rising edge (or already high when PIO starts)
    wait 0 gpio IOW_PIN           ; IOW falling edge, no sideset to not conflict with other SMs
    jmp pin sixteen side 0b10
    in pins,8 side 0b10
    in y,8  side 0b10
    jmp proceed side 0b10
sixteen:
    in pins, 16    side 0b10 ; Read data
proceed:
    ;nop [3]             side 0b10 ; Wait more for mux to switch; max 3 because of optional sideset
    out X, 32           side 0b10 ; get condition from handle_iow, set muxes back to address
    jmp !X restart      side 0b10 ; if we get a 0 condition from handle_iow, it's not an interesting address
    ;out null, 32        side 0b01 ; stall with IOCHRDY low until handle_iow completes
    wait 1 gpio IOW_PIN side 0b11
;    set x,3 side 0b11
;lp_wait:
    ;jmp x-- lp_wait [3] side 0b11
    nop  [3]               side 0b10 ; bring IOCHRDY back. TODO see if we can move the sideset back to restart
.wrap

% c-sdk {
static inline void iow_program_init(PIO pio, uint sm, uint offset, float clkdiv) {
    pio_sm_config c = iow_program_get_default_config(offset);

    // Set up AD0 pins as input
    sm_config_set_in_pins(&c, AD0_PIN);
    // Autopush at 18 bits (16 addr + 16 data)
    sm_config_set_in_shift(&c, false, true, 16);
    //sm_config_set_clkdiv(&c, clkdiv);

    // Autopull 32 bits (condition variables from handle_ior)
    sm_config_set_out_shift(&c, true, true /* autopull */, 32);

    // Set the pin direction for IOW and AD0 bus as input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, IOW_PIN, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, AD0_PIN, 16, false);

    // set up SYNC_PIN
    //pio_gpio_init(pio, SYNC_PIN);

    // set up IOCHRDY and ADS
    sm_config_set_sideset_pins(&c, IOCHRDY_PIN);
    pio_gpio_init(pio, IOCHRDY_PIN);
    pio_gpio_init(pio, DIR_PIN);
    pio_sm_set_consecutive_pindirs(pio, sm, IOCHRDY_PIN, 2, true);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << IOCHRDY_PIN);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << DIR_PIN);

    // JMP on DACK so we can ignore iow during DMA write
    sm_config_set_jmp_pin(&c, BYTE_PIN);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program addr_mux
.wrap_target
restart:
    wait 1 gpio SYNC_PIN
    wait 0 gpio SYNC_PIN
    mov x,!pins
    in x,16
.wrap

% c-sdk {
static inline void addr_mux_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = addr_mux_program_get_default_config(offset);

    // Set up AD0 pins as input
    sm_config_set_in_pins(&c, AD0_PIN);
    // Autopush at 18 bits (16 addr)
    sm_config_set_in_shift(&c, false, true, 16);

    pio_sm_set_consecutive_pindirs(pio, sm, SYNC_PIN, 1, false);
    // set up SYNC_PIN
    //pio_gpio_init(pio, SYNC_PIN);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}

; 10 instructions
.program ior
.side_set 2 opt                   ; sideset bit 1 is ADS, bit 0 is IOCHRDY
restart:
    wait 1 gpio IOR_PIN           ; ensure IOR high when PIO starts
.wrap_target
    wait 0 gpio IOR_PIN           ; IOR falling edge, no sideset to not conflict with other SMs
    in pins, 16         side 0b10 ; - Read address
    out X, 32           side 0b10 ; stall until we get condition from handle_ior
    jmp !X restart      side 0b10 ; if we get a 0 condition from handle_ior, it's not an interesting address
    out pins, 16   [3]      side 0b10 ; output data to be written, stalling with IOCHRDY low until data is ready
    mov osr, ~null [3]      side 0b10
    out pindirs, 16 [3]     side 0b00 ; next 8 in pindirs is FF - set pindirs as output
    wait 1 gpio IOR_PIN side 0b01 ; - wait for IOR rising edge with IOCHRDY high and muxes to data
    mov osr, null        side 0b10
    out pindirs, 16      side 0b10 ; next 8 in pindirs is 00 - set pindirs back as input
    ;nop [3] side 0b10
.wrap

% c-sdk {
static inline void ior_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = ior_program_get_default_config(offset);

    sm_config_set_in_pins(&c, AD0_PIN);
    sm_config_set_in_shift(&c, false, true, 16);

    // Set the pin direction to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, IOR_PIN, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, AD0_PIN, 16, false);

    sm_config_set_out_pins(&c, AD0_PIN, 16);
    sm_config_set_out_shift(&c, true, true /* autopull */, 32);
    // Set this pin's GPIO function (connect PIO to the pad)
    for (int i = AD0_PIN; i <= AD0_PIN + 16; i++) {
        pio_gpio_init(pio, i);
    }

    // set up IOCHRDY and ADS
    sm_config_set_sideset_pins(&c, IOCHRDY_PIN);
    pio_gpio_init(pio, IOCHRDY_PIN);
    pio_gpio_init(pio, DIR_PIN);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << IOCHRDY_PIN);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << DIR_PIN);
    pio_sm_set_consecutive_pindirs(pio, sm, IOCHRDY_PIN, 2, true);

    // Load our configuration, and jump to the start of the program
    // pio->input_sync_bypass = ((0x1u << IOR_PIN) | (0x3ffu << AD0_PIN));
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}